import pickle
from tqdm import tqdm
from pixel import pixel_model
from radical import get_glyph_similarity


# Local perceptual constraint score is Constructed from LPIPS similarity and glyph similarity
def get_local_similarity(text1, text2):
    pixel_score = model.get_lpips_similarity(text1, text2)
    radical_score = get_glyph_similarity(text1, text2)
    return (0.8 * pixel_score + 0.2 * radical_score, pixel_score)


if __name__ == '__main__':
    # Utils
    utils_dir = './utils/characters'
    pixel_file = f'{utils_dir}/pixel_level_similar_characters.pkl'
    radical_file = f'{utils_dir}/radical_level_similar_characters.pkl'
    model = pixel_model()
    
    # Read similar characters generated by two strategies
    with open(pixel_file, 'rb') as file:
        pixel_data = pickle.load(file)

    with open(radical_file, 'rb') as file:
        radical_data = pickle.load(file)

    # Sort pixel similar character by local perceptual constraint score
    pixel_dict = {}
    pbar = tqdm(total=len(pixel_data.keys()), desc='sort pixel similar character')
    for character in pixel_data.keys():
        tmp = [
            (
                tmp_character[0], 
                get_local_similarity(tmp_character[0], character)
            ) for tmp_character in pixel_data[character]
        ]
        tmp = sorted(tmp, key=lambda x: x[1][0], reverse=True)
        pixel_dict[character] = tmp[:10]
        pbar.update(1)

    with open(f'{utils_dir}/pixel_level_similar_characters_with_local_constraint.pkl', 'wb') as file:
        pickle.dump(pixel_dict, file)

    # Sort radical similar character by local constraint score
    radical_dict = {}
    pbar = tqdm(total=len(radical_data.keys()), desc='sort radicals similar char')
    for character in radical_data.keys():
        tmp = [
            (
                tmp_character[0], 
                get_local_similarity(tmp_character, character)
            ) for tmp_character in radical_data[character]
        ]
        tmp = sorted(tmp, key=lambda x: x[1][0], reverse=True)
        radical_dict[character] = tmp[:10]
        pbar.update(1)

    with open(f'{utils_dir}/radical_level_similar_characters_with_local_constraint.pkl', 'wb') as file:
        pickle.dump(radical_dict,file)

